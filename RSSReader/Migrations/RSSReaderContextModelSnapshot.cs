// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace RSSReader.Migrations
{
    [DbContext(typeof(RSSReaderContext))]
    partial class RSSReaderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Infrastructure.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(100);

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Infrastructure.Models.Feed", b =>
                {
                    b.Property<int>("FeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("feed_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<Guid?>("ImageId")
                        .HasColumnName("image_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url");

                    b.HasKey("FeedId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.ToTable("Feed");
                });

            modelBuilder.Entity("Infrastructure.Models.Image", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("image_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<double?>("Height")
                        .HasColumnName("height");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnName("link");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url");

                    b.Property<double?>("Width")
                        .HasColumnName("width");

                    b.HasKey("ImageId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Infrastructure.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnName("author");

                    b.Property<string>("CommentsUrl")
                        .HasColumnName("comments_url");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnName("date_added");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("FeedId")
                        .HasColumnName("feed_id");

                    b.Property<bool>("IsRead")
                        .HasColumnName("is_read");

                    b.Property<string>("Link")
                        .HasColumnName("link");

                    b.Property<string>("PostHash")
                        .HasColumnName("post_hash");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnName("publish_date");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.HasKey("PostId");

                    b.HasIndex("FeedId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Infrastructure.Models.Feed", b =>
                {
                    b.HasOne("Infrastructure.Models.Category", "Category")
                        .WithMany("Feeds")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Infrastructure.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("Infrastructure.Models.Post", b =>
                {
                    b.HasOne("Infrastructure.Models.Feed", "Feed")
                        .WithMany("Posts")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
